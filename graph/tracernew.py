# -*- coding: utf-8 -*-
"""TracerNEW

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XOyie78y6XolRk9dN7WyNs0Jw1Qxp5E8

# **Import Data**
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Define the file path
file_path = '/content/drive/MyDrive/Tracer Study/Standarisasi_Kuesioner_2018-2022_1.xlsx'

# Load the Excel file into a Pandas DataFrame with the sheet name '2019'
df = pd.read_excel(file_path, sheet_name='2019')

"""# **4 Waktu Pencarian Kerja**"""

# Define the column names for the boxplots
column_before_lulus = 'Berapa bulan sebelum lulus Anda mencari kerja? (di luar pekerjaan sambilan)'
column_after_lulus = 'Berapa bulan setelah lulus Anda mencari kerja? (di luar pekerjaan sambilan)'

# Create boxplots without fliers (diamond shapes)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(data=df, y=column_before_lulus, flierprops=dict(markerfacecolor='none', markeredgecolor='none'))

# Calculate and plot the mean as a black square
mean_value = np.mean(df[column_before_lulus])
plt.scatter(0, mean_value, color='black', marker='s', label='Mean')

# Calculate and plot the min and max as red triangles
min_value = np.min(df[column_before_lulus])
max_value = np.max(df[column_before_lulus])
plt.scatter([0, 0], [min_value, max_value], color='red', marker='^', label='Min/Max')

plt.title('Sebelum Lulus')
plt.ylabel(' ')
plt.legend()

plt.subplot(1, 2, 2)
sns.boxplot(data=df, y=column_after_lulus, flierprops=dict(markerfacecolor='none', markeredgecolor='none'))

# Calculate and plot the mean as a black square
mean_value = np.mean(df[column_after_lulus])
plt.scatter(0, mean_value, color='black', marker='s', label='Mean')

# Calculate and plot the min and max as red triangles
min_value = np.min(df[column_after_lulus])
max_value = np.max(df[column_after_lulus])
plt.scatter([0, 0], [min_value, max_value], color='red', marker='^', label='Min/Max')

plt.title('Setelah Lulus')
plt.ylabel(' ')
plt.legend()

plt.tight_layout()
plt.show()

# Generate a statistical summary table
summary_table = df[[column_before_lulus, column_after_lulus]].describe()

# Print the summary table
print(summary_table)

"""# **Persentase Pencarian Kerja melalu ITB Career Center**"""

# Define the mapping of categories to 'ya' or 'tidak'
category_mapping = {'Memperoleh informasi dari ITB Career Center (Website, Titian Karir, Brosur / Pamflet / Poster, Campus Recruitment)': 'ya',}

# Apply the mapping to create a new column 'Clustered_Category'
df['Clustered_Category'] = df['Melalui apa Anda mendapatkan pekerjaan pertama?'].map(category_mapping).fillna('tidak')

# Count the 'ya' and 'tidak' categories
counts = df['Clustered_Category'].value_counts()

# Create a pie chart with count values for 'ya' and 'tidak' only
plt.figure(figsize=(6, 6))
labels = [f'{label} ({count})' for label, count in counts.items()]
plt.pie(list(counts.values), labels=labels, autopct='%1.1f%%', startangle=140)
plt.title('Persentase Pencarian Kerja melalui ITB Career Center')
plt.show()
counts

"""# **Pencarian Kerja di luar ITB Career Center**"""

# Filter out the category 'Memperoleh informasi dari ITB Career Center (Website, Titian Karir, Brosur / Pamflet / Poster, Campus Recruitment)'
filtered_df = df[df['Melalui apa Anda mendapatkan pekerjaan pertama?'] != 'Memperoleh informasi dari ITB Career Center (Website, Titian Karir, Brosur / Pamflet / Poster, Campus Recruitment)']

# Count the occurrences of each category
category_counts = filtered_df['Melalui apa Anda mendapatkan pekerjaan pertama?'].value_counts()

# Calculate percentages
category_percentages = (category_counts / category_counts.sum()) * 100

# Exclude categories with only one value
filtered_category_counts = category_counts[category_counts > 1]
filtered_category_percentages = category_percentages[category_counts > 1]

# Create a horizontal bar chart with percentages and counts annotations
plt.figure(figsize=(10, 6))
bars = filtered_category_percentages.plot(kind='barh', color='skyblue')
plt.title('Pencarian Kerja di luar ITB Career Center')
plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top

# Annotate each bar with percentage and count
for i, v in enumerate(filtered_category_percentages):
    count = filtered_category_counts.iloc[i]
    plt.text(v, i, f'{v:.1f}% ({count})', va='center')

plt.show()

category_counts

"""# **Jumlah Perusahaan Dilamar**"""

import matplotlib.ticker as mtick
# Define the column name for 'Berapa perusahaan / instansi / institusi yang sudah Anda lamar sebelum memperoleh pekerjaan pertama?'
column_lamar_before_first_job = 'Berapa perusahaan / instansi / institusi yang sudah Anda lamar sebelum memperoleh pekerjaan pertama?'

# Count the occurrences of each integer value
value_counts = df[column_lamar_before_first_job].value_counts()

# Create categories based on the specified bins
bins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, float('inf')]
labels = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '>10']

# Categorize the data based on the bins and calculate percentages
category_counts = pd.cut(df[column_lamar_before_first_job], bins=bins, labels=labels).value_counts()
total_responses = len(df)
category_percentages = (category_counts / total_responses) * 100

# Create a bar chart with percentages
plt.figure(figsize=(10, 6))
category_percentages[labels].plot(kind='bar', color='skyblue')
plt.title('Jumlah Perusahaan Dilamar')
plt.xticks(rotation=360)
plt.tight_layout()
# Annotate each bar with percentage and count
for i, v in enumerate(category_percentages[labels]):
    count = category_counts[labels[i]]
    plt.text(i, v, f'{v:.0f}%; [{count}]', ha='center', va='bottom')
# Format y-axis tick labels as percentages
ax = plt.gca()
ax.yaxis.set_major_formatter(mtick.PercentFormatter())

plt.show()

"""# **Waktu Tunggu Mendapatkan Pekerjaan**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


# Define the column names for the two columns
column_before_lulus = 'Berapa bulan sebelum lulus Anda mencari kerja? (di luar pekerjaan sambilan)'
column_after_lulus = 'Berapa bulan setelah lulus Anda mencari kerja? (di luar pekerjaan sambilan)'

# Combine both columns into a single column
combined_column = df[column_before_lulus].combine_first(df[column_after_lulus]).dropna()

# Create a boxplot for the combined data
plt.figure(figsize=(8, 6))
sns.boxplot(data=combined_column, color='skyblue', flierprops=dict(markerfacecolor='none', markeredgecolor='none'))

# Calculate and plot the mean as a black square
mean_value = np.mean(combined_column)
plt.scatter(0, mean_value, color='black', marker='s', label='Mean')

# Calculate and plot the min and max as red triangles
min_value = np.min(combined_column)
max_value = np.max(combined_column)
plt.scatter([0, 0], [min_value, max_value], color='red', marker='^', label='Min/Max')

plt.title('Waktu Tunggu Mendapatkan Pekerjaan')
plt.xlabel('Category')

# Add legend for mean and min/max
plt.legend()
plt.show()

# Calculate statistical values
N = len(combined_column)
minimum = int(combined_column.min())
maximum = int(combined_column.max())
median = int(combined_column.median())
mean = int(combined_column.mean())
std_dev = int(combined_column.std())
count_less_than_3 = (combined_column < 3).sum()
count_between_3_and_6 = ((combined_column >= 3) & (combined_column <= 6)).sum()
count_greater_than_6 = (combined_column > 6).sum()

# Create a DataFrame for the statistical values
statistical_data = pd.DataFrame({
    " ": ["Nbr. of observations", "Minimum", "Maximum", "Median", "Mean",
                            "Standard deviation (n-1)", "< 3 bulan", "3 - 6 bulan",
                            "> 6 bulan"],
    "Statistic": [N, minimum, maximum, median, mean, std_dev, count_less_than_3, count_between_3_and_6, count_greater_than_6]
})

# Display the DataFrame as a table
print(statistical_data)

"""# **Jalur Mendapatkan Pekerjaan Pertama**"""

# Filter out the category 'Memperoleh informasi dari ITB Career Center (Website, Titian Karir, Brosur / Pamflet / Poster, Campus Recruitment)'
filtered_df = df[df['Melalui apa Anda mendapatkan pekerjaan pertama?'] != 'Memperoleh informasi dari ITB Career Center (Website, Titian Karir, Brosur / Pamflet / Poster, Campus Recruitment)']

# Count the occurrences of each category
category_counts = filtered_df['Melalui apa Anda mendapatkan pekerjaan pertama?'].value_counts()

# Calculate percentages
category_percentages = (category_counts / category_counts.sum()) * 100

# Exclude categories with only one value
filtered_category_counts = category_counts[category_counts > 1]
filtered_category_percentages = category_percentages[category_counts > 1]

# Create a horizontal bar chart with percentages and counts annotations
plt.figure(figsize=(10, 6))
bars = filtered_category_percentages.plot(kind='barh', color='skyblue')
plt.title('Pencarian Kerja di luar ITB Career Center')
plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top

# Annotate each bar with percentage and count
for i, v in enumerate(filtered_category_percentages):
    count = filtered_category_counts.iloc[i]
    plt.text(v, i, f'{v:.1f}% ({count})', va='center')

plt.show()

"""# **Relasi Dalam Mendapatkan Pekerjaan**"""

import pandas as pd
import matplotlib.pyplot as plt

# Define the column name for 'Jika relasi, siapakah relasinya?'
column_relasi = 'Jika relasi, siapakah relasinya?'

# Create a new DataFrame containing only the 'column_relasi' column
relasi_df = df[[column_relasi]].copy()

# Define a mapping of values to categories
category_mapping = {
    'Alumni/Teman/Kenalan': ['Gereja', 'Tetangga', 'TU Prodi', 'Web Prodi', 'adik kelas yang magang di instansi tersebut.', 'Manager magang', 'direktur perusahaan', 'Teman / Alumni', 'Teman Kajian', 'Organisasi luar kampus', 'Teman kerja teman orang tua', 'Teman proyekan', 'Teman SMA', 'CEO tempat magang direktur perusahaan'],
    'Dosen/Guru': ['Dosen', 'Guru SMA'],
    'Keluarga/Orang Tua/Saudara': ['Orang tua / Saudara / Keluarga', 'Orang tua Wali']
}

# Create a new column with the categories and assign 'Other' to values not in the mapping
relasi_df['Relasi Category'] = relasi_df[column_relasi].apply(lambda x: next((category for category, values in category_mapping.items() if x in values), 'Other'))

# Filter the relasi_df DataFrame to include only the specified categories (excluding 'Other')
relasi_df = relasi_df[relasi_df['Relasi Category'] != 'Other']

# Count the occurrences of each category
category_counts = relasi_df['Relasi Category'].value_counts()

# Create a horizontal bar chart with percentages
plt.figure(figsize=(10, 6))
category_counts.plot(kind='barh', color='skyblue')
plt.title('Relasi dalam Mendapatkan Pekerjaan')
plt.gca().invert_yaxis()  # Invert the y-axis to have the highest count at the top

# Annotate each bar with the count and percentage
total_count = category_counts.sum()
for i, count in enumerate(category_counts):
    percentage = count / total_count * 100
    plt.text(count, i, f'{percentage:.0f}% ({count})', va='center')

plt.show()

"""# **Alasan Mendapatkan Pekerjaan Pertama**"""

filtered_df = df['Aspek apa yang menjadi pertimbangan utama Anda dalam memilih pekerjaan pertama?']

# Count the occurrences of each category
category_counts = filtered_df.value_counts()

# Calculate percentages
category_percentages = (category_counts / category_counts.sum()) * 100

# Exclude categories with only one value
filtered_category_counts = category_counts[category_counts > 6]
filtered_category_percentages = category_percentages[category_counts > 6]

# Create a horizontal bar chart with percentages and counts annotations
plt.figure(figsize=(10, 6))
bars = filtered_category_percentages.plot(kind='barh', color='skyblue')
plt.title('Alasan Mendapatkan Pekerjaan Pertama')
plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top

# Annotate each bar with percentage and count
for i, v in enumerate(filtered_category_percentages):
    count = filtered_category_counts.iloc[i]
    plt.text(v, i, f'{v:.1f}% ({count})', va='center')

plt.show()

!pip install fuzzywuzzy

import pandas as pd
import matplotlib.pyplot as plt
from fuzzywuzzy import fuzz

# Create a new DataFrame to work with
aspek_df = df.copy()

# Define the column name for 'Aspek apa yang menjadi pertimbangan utama Anda dalam memilih pekerjaan pertama?'
column_aspek = 'Aspek apa yang menjadi pertimbangan utama Anda dalam memilih pekerjaan pertama?'

# Convert values to strings
aspek_df[column_aspek] = aspek_df[column_aspek].astype(str)

# Create a DataFrame to store the mapping of clustered values to categories
value_to_category = pd.DataFrame(columns=['Value', 'Category'])

# Iterate through unique values and cluster them
for value in aspek_df[column_aspek].unique():
    if not value_to_category.empty:
        # Use fuzzy string matching to find similar values and their matching scores
        matches = value_to_category['Value'].apply(lambda x: fuzz.ratio(value, x))
        # Set a similarity threshold, e.g., 80, to determine if a value should be clustered into an existing category
        threshold = 80
        best_match = matches.idxmax()
        if matches[best_match] >= threshold:
            category = value_to_category.loc[best_match, 'Category']
        else:
            # If no similar category is found, create a new category
            category = value
        value_to_category = pd.concat([value_to_category, pd.DataFrame({'Value': [value], 'Category': [category]})], ignore_index=True)
    else:
        # If value_to_category is empty, create a new category for the first value
        value_to_category = pd.DataFrame({'Value': [value], 'Category': [value]})

# Merge the aspek_df with the value-to-category mapping
aspek_df = aspek_df.merge(value_to_category, left_on=column_aspek, right_on='Value', how='left')

# Count the occurrences of each category
category_counts = aspek_df['Category'].value_counts()

# Filter out 'nan' and '-'
category_counts = category_counts[category_counts.index != 'nan']
category_counts = category_counts[category_counts.index != '-']

# Remove categories with a count less than 7
category_counts = category_counts[category_counts >= 7]

# Calculate the total count for percentage calculation
total_count = category_counts.sum()

# Calculate percentages based on the filtered count
category_percentages = (category_counts / total_count) * 100

# Create a horizontal bar chart with percentages and counts annotations
plt.figure(figsize=(10, 6))
bars = category_percentages.plot(kind='barh', color='skyblue')
plt.title('Alasan Mendapatkan Pekerjaan Pertama')
plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top

# Annotate each bar with percentage and count based on the filtered count
for i, v in enumerate(category_percentages):
    count = category_counts.iloc[i]
    plt.text(v, i, f'{v:.1f}% ({count})', va='center')

plt.show()

"""# **Kriteria Penerimaan Pegawai Baru**"""

import pandas as pd
import matplotlib.pyplot as plt

# Create a new DataFrame to work with
kriteria_df = df.copy()

# Define the list of columns to analyze
columns_to_analyze = [
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [program studi]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [spesialisasi]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [IP]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [pengalaman kerja selama kuliah]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [reputasi dari perguruan tinggi]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [pengalaman ke luar negeri (untuk bekerja atau magang)]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [kemampuan bahasa Inggris]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [kemampuan bahasa asing lainnya]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [pengoperasian komputer]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [pengalaman berorganisasi]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [rekomendasi dari pihak ketiga]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [kepribadian dan keterampilan interpersonal]',
    'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [sertifikasi profesi]',
    #'Berdasarkan persepsi Anda, aspek apakah yang menjadi penilaian penting bagi perusahaan / instansi dalam melakukan penerimaan pegawai baru? (Jawaban bisa lebih dari 1) [Other (describe)]',
]

# Create a DataFrame to store the results
data = []

# Iterate through the specified columns and calculate the percentage of "1" values
for column in columns_to_analyze:
    total_count = len(kriteria_df)
    one_count = kriteria_df[column].sum()
    percentage = (one_count / total_count) * 100
    # Extract the column name from within the brackets
    column_name = column.split('[', 1)[1].split(']', 1)[0]
    data.append({'Column Name': column_name, 'Percentage of "1"': percentage})

# Create a DataFrame from the data list
percentage_df = pd.DataFrame(data)

# Sort the DataFrame by the 'Percentage of "1"' column in descending order
percentage_df = percentage_df.sort_values(by='Percentage of "1"', ascending=False)

# Create a horizontal bar plot
plt.figure(figsize=(10, 6))
bars = percentage_df.plot(kind='barh', x='Column Name', y='Percentage of "1"', color='skyblue', legend=False)
plt.title('Kriteria Penerimaan Pegawai Baru')
plt.xlabel(' ')
plt.ylabel(' ')

# Annotate each bar with the percentage value
for i, v in enumerate(percentage_df['Percentage of "1"']):
    plt.text(v, i, f'{v:.0f}%', va='center')

plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top
plt.show()

"""# **Komentar Positif terhadap Pekerjaan**"""

import pandas as pd
import matplotlib.pyplot as plt

# Create a new DataFrame to work with
komentar_df = df.copy()

# Define the column name to analyze
column_komentar = 'Komentar POSITIF terhadap pekerjaan Anda saat ini?'

# Count the occurrences of each unique value
komentar_counts = komentar_df[column_komentar].value_counts()

# Filter out 'nan' and '-' values
komentar_counts = komentar_counts[komentar_counts.index != 'nan']
komentar_counts = komentar_counts[komentar_counts.index != '-']

# Filter out values with a count less than 5 (you can adjust this threshold)
count_threshold = 5
komentar_counts = komentar_counts[komentar_counts >= count_threshold]

# Calculate the total count (excluding 'nan' and '-')
total_count = komentar_counts.sum()

# Calculate the percentage
komentar_percentages = (komentar_counts / total_count * 100)

# Create a horizontal bar plot
plt.figure(figsize=(10, 6))
bars = komentar_counts.plot(kind='barh', color='skyblue')
plt.title('Komentar Positif terhadap Pekerjaan Saat Ini')

# Annotate each bar with the percentage and count in the desired format
for i, (percentage, count) in enumerate(zip(komentar_percentages, komentar_counts)):
    annotation = f'{percentage:.0f}% ({count})'
    plt.text(count, i, annotation, va='center')

plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top
plt.show()

"""# **Komentar Negatif terhadap Pekerjaan Saat Ini**"""

import pandas as pd
import matplotlib.pyplot as plt

# Create a new DataFrame to work with
komentar_negatif_df = df.copy()

# Define the column name to analyze
column_komentar_negatif = 'Komentar NEGATIF terhadap pekerjaan Anda saat ini?'

# Specify the values to include in the plot
selected_values = [
    'Gaji kurang memuaskan',
    'Lingkungan kerja tidak kondusif (pekerjaan terlalu padat, dll)',
    'Tidak sesuai minat',
    'Tidak sesuai dengan yang diharapkan',
    'Kesempatan belajar sangat kecil',
]

# Filter the DataFrame to include only the specified values
filtered_df = komentar_negatif_df[komentar_negatif_df[column_komentar_negatif].isin(selected_values)]

# Count the occurrences of each value
komentar_counts = filtered_df[column_komentar_negatif].value_counts()

# Calculate the total count
total_count = len(filtered_df)

# Calculate the percentage
komentar_percentages = (komentar_counts / total_count * 100)

# Create a horizontal bar plot
plt.figure(figsize=(10, 6))
bars = komentar_counts.plot(kind='barh', color='skyblue')
plt.title('Komentar Negatif terhadap Pekerjaan Saat Ini')

# Annotate each bar with the percentage and count in the desired format
for i, (percentage, count) in enumerate(zip(komentar_percentages, komentar_counts)):
    annotation = f'{percentage:.0f}% ({count})'
    plt.text(count, i, annotation, va='center')

plt.gca().invert_yaxis()  # Invert the y-axis to have the highest percentage at the top
plt.show()